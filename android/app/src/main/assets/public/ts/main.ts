// Import c√°c plugin c·ªßa Capacitor
import { LocalNotifications } from '@capacitor/local-notifications';
import { Share } from '@capacitor/share';
import { Device } from '@capacitor/device';

// H√†m ki·ªÉm tra nƒÉm nhu·∫≠n
function isLeapYear(year: number): boolean {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// H√†m t√≠nh s·ªë ng√†y trong th√°ng
function daysInMonth(month: number, year: number): number {
    if (month === 2) return isLeapYear(year) ? 29 : 28;
    if ([4, 6, 9, 11].includes(month)) return 30;
    return 31;
}

// H√†m t√≠nh ng√†y sinh nh·∫≠t (ch·ªâ 1 implementation duy nh·∫•t)
async function calculateBirthdayCountdown(): Promise<void> {
    try {
        const birthDateInput = (document.getElementById("birthDate") as HTMLInputElement)?.value;
        if (!birthDateInput) {
            alert("Vui l√≤ng nh·∫≠p ng√†y sinh!");
            return;
        }

        const dateParts = birthDateInput.split("/");
        if (dateParts.length !== 2) {
            alert("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng DD/MM");
            return;
        }

        const day = parseInt(dateParts[0]);
        const month = parseInt(dateParts[1]);
        const today = new Date();
        const currentYear = today.getFullYear();

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
        if (isNaN(day) || isNaN(month) || month < 1 || month > 12 || 
            day < 1 || day > daysInMonth(month, currentYear)) {
            alert("Ng√†y th√°ng kh√¥ng h·ª£p l·ªá!");
            return;
        }

        let nextBirthday = new Date(currentYear, month - 1, day);
        
        // Ki·ªÉm tra l·∫°i t√≠nh h·ª£p l·ªá
        if (nextBirthday.getDate() !== day || nextBirthday.getMonth() + 1 !== month) {
            alert("Ng√†y th√°ng kh√¥ng h·ª£p l·ªá!");
            return;
        }

        if (nextBirthday < today) {
            nextBirthday.setFullYear(currentYear + 1);
        }

        const timeDiff = nextBirthday.getTime() - today.getTime();
        const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
        
        const resultElement = document.getElementById("result");
        if (resultElement) {
            resultElement.innerText = `C√≤n ${daysLeft} ng√†y n·ªØa ƒë·∫øn sinh nh·∫≠t c·ªßa b·∫°n!`;
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o
        await LocalNotifications.schedule({
            notifications: [
                {
                    title: "ƒê·∫øm ng∆∞·ª£c sinh nh·∫≠t",
                    body: `C√≤n ${daysLeft} ng√†y n·ªØa l√† ƒë·∫øn sinh nh·∫≠t b·∫°n! üéâ`,
                    id: 1,
                    schedule: { at: new Date(Date.now() + 1000) },
                }
            ]
        });
    } catch (error) {
        console.error("L·ªói khi t√≠nh ng√†y sinh nh·∫≠t:", error);
        alert("C√≥ l·ªói x·∫£y ra khi t√≠nh ng√†y sinh nh·∫≠t!");
    }
}

// C√°c h√†m shareCountdown v√† checkBatteryStatus gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc
// ...

// G√°n s·ª± ki·ªán
window.onload = () => {
    const calculateBtn = document.getElementById("calculateButton");
    if (calculateBtn) {
        calculateBtn.addEventListener("click", calculateBirthdayCountdown);
    }
    // G√°n c√°c s·ª± ki·ªán kh√°c t∆∞∆°ng t·ª±
};